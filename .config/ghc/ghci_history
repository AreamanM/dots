main
:l day5.hs
main
:l day4.hs
: day4.hs
ajoin 5 (+3)  6
ajoin = (foldr1 (.) . ) . replicate
ajoin 5 (+3)  6
:t ajoin
ajoin n = foldr1 (.) . (replicate n)
ajoin n = foldr1 (.) replicate n
ajoin n f = foldr1 (.) (replicate n f)
ajoin 5 (+3)  6
ajoin n f = foldr1 (.) . (replicate n)
ajoin 5 (+3)  6
ajoin n f = foldr1 (.) (replicate n .)
ajoin 5 (+3)  6
ajoin n f = foldr1 (.) . (replicate n)
ajoin 5 (+3)  6
:t ajoin
ajoin n f = foldr1 (.) (replicate n f)
ajoin n f = foldr1 (.) (replicate n f)
ajoin f n = foldr1 (.) ((replicate n) f)
ajoin f n = foldr1 (.) (replicate n f)
ajoin (+3) 5 8
ajoin (+3) 5 7
ajoin (+3) 5 6
ajoin (+3) 0 5
ajoin (+3) 0
ajoin (+3) 5 6
ajoin (+3) 5 6
ajoin (+3) 5 5
ajoin f n = foldr1 (.) (replicate n f)
((+3) 5) 5
ajoin f n = foldr1 (.) (replicate n f)
:t Data.List.lookup
:t lookup
:t lookuo
foldr1 (.) (replicate 3 (+3)) 5
foldr (.) id (replicate 3 (+3)) 5
:m -Data.IntMap.Strict
foldr (.) id (replicate 3 (+3)) 5
foldr (.) id (replicate 3 (+3))
foldr (.) id replicate 3 [+3]
replicate 3 [+3]
replicate 3 [+3)
:t replicate
main
:l day11.hs
take 5 $ iterate (+1) 0
:m +Data.List
main
:l day11.hs
main
:l day11.hs
main
:l day11.hs
main
:l day11.hs
:l day11.hs
main
:l day11.hs
main
:l day11.hs
main
:l day11.hs
main
:l day11.hs
main
:l day11.hs
:l day11.hs
:info Integer
:info Int
main
:l day11.hs
main
:l day11.hs
main
:l day11.hs
main
:l day11.hs
main
:l day11.hs
main
:l day11.hs
main
:l day11.hs
main
:l day11.hs
main
:l day11.hs
main
:l day11.hs
:l day11.hs
main
main
:l day11.hs
main
:l day11.hs
main
